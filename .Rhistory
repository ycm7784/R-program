# 실습: R 패키지 보기
dim(available.packages())
# 실습: R 패키지 보기
dim(available.packages())
# 실습: R ㅍ키지 목록 보기
available.packages()
# 실습: R Session 보기
sessionInfo()
# 실습: stringr 패키지 설치
install.packages(("stringr"))
# 실습: 패키지 로드
library(stringr)
search()
library(blm)
# 실습: 패키지 로드
library(stringr)
search()
library(blm)
# 실습: stringr 패키지 설치
install.packages(("stringr"))
# 실습: stringr 패키지 설치
install.packages(("stringr"))
# 실습: stringr 패키지 설치
install.packages(("stringr"))
# 실습: 패키지 로드
library(stringr)
search()
library(blm)
require(blm)
# 실습: 기본 데이터 셋 보기
data()
# 실습: 기본 데이터 셋으로 히스토그램 그리기
# 단계 1: 빈도수를 기준으로 히슽로그램 그리기
hist(Nile)
# 단계 2: 밀도를 기준으로 히스토그램 그리기
hist(Nile, freq = F)
# 실습: 기본 데이터 셋으로 히스토그램 그리기
# 단계 1: 빈도수를 기준으로 히슽로그램 그리기
hist(Nile)
# 단계 2: 밀도를 기준으로 히스토그램 그리기
hist(Nile, freq = F)
# 단계 3: 단계 2의 결과에 분포 곡선을 추가
lines(density(Nile))
par
par
# 실습: 히스토그램을 파일로 저장하기
par(mfrow = c(1, 1))
pdf("C:/Rwork/batch.pdf")
hist(rnorm(20))
dev.off()
int <- 20
int
string <- "홍길동"
string
boolean <- TRUE
boolean
sum(10, 20, 20)
sum(10, 20, 20, NA)
sum(10, 20, 20, NA, na.rm = TRUE)
ls()
gender <- c("man", "woman", "woman", "man", "man")
plot(gender)
# 실습: as.factor() 함수를 이용하여 요인형 변환
Ngender <- as.factor(gender)
table(Ngender)
Ngender
# 실습: Factor 형 변수로 차트 그리기
plot(Ngender)
mode(Ngender)
class(Ngender)
is.factor(Ngender)
# 실습: as.factor() 함수를 이용하여 요인형 변환
Ngender <- as.factor(gender)
table(Ngender)
Ngender
table(Ngender)
table(Ngender)
Ngender
table(Ngender)
Ngender
# 실습: g함수 사용 예를 보여주는 example() 함수
example(seq)
setwd("C:/Rwork/Part-I")
data <- read.csv("test.csv", header = T)
data
# 실습: c() 함수를 이용한 벡터 객체 생성
c(1:20)
1:20
c(1, 2, 3, 4, 5)
# 실습: seq() 함수를 이용한 벡터 객체 생성
seq(1, 10, 2)
# rep() 함수를 이용한 벡터 생성
rep(1:3, 3)
rep(1:3, each = 3)
# 실습: union(), setdiff() 그리고 intersect() 함수를 이용한 벡터 자료 처리
x <- c(1, 3, 5, 7)
y <- c(3, 5)
union(x, y)
setdiff(x, y)
intersect(x, y)
# 실습: 숫자형, 문자형 논리형 벡터 생성
v1 <- c(33, -5, 20:23, 12, -2:3)
v2 <- c("홍길동", "이순신", "유관순")
v3 <- c(T, TRUE, FALSE, T, TRUE, F, T)
v1; v2; v3
# 실습: 자료형이 혼합된 경우
v4 <- c(33, 05, 20:23, 12, "4")
v4
# 실습: 한 줄에 ㅔ여러 개의 스크립트 명령문 사용
v1; mode(v1); class(v1)
v2; mode(v2); class(v2)
v3; mode(v3); class(v3)
# 실습: 벡터 객체의 값에 칼럼명 지정
age <- c(30, 35, 40)
age
names(age) <- c("홍길동", "이순신", "강감찬")
# 실습: 벡터 자료 참조하기
a <- c(1:50)
a[10:45]
a[19: (length(a) - 5)]
# 실습: 잘못된 첨자를 사용하는 경우
a[1, 2]
# 실습: c() 함수에서 콤마 사용 예
v1 <- c(13, -5, 20:23, 12, -2:3)
v1[1]
v1[c(2, 4)]
v1[c(3:5)]
v1[c(4, 5:8, 7)]
# 실습: 음수 값으로 벡터 자료의 첨자를 사용하는 예
v1[-1]; v1[-c(2, 4)]; v1[-c(2:5)]; v1[-c(2, 5:10, 1)]
# 실습: RSADBE 패키지 설치와 메모리 로딩
install.packages("RSADBE")
library(RSADBE)
data(Severity_Counts)
str(Severity_Counts)
#12 연습문제 1
smoke <- read.csv("./data/smoke.csv")
#12 연습문제 1
setwd()
#12 연습문제 1
getwd()
setwd(D:/양철민/R프로그래밍/works/script)
setwd("D:/양철민/R프로그래밍/works/script")
smoke <- read.csv("./data/smoke.csv")
#12 연습문제 1
getwd()
smoke <- read.csv("./data/smoke.csv")
smoke <- read.csv("../data/smoke.csv")
head(smoke)
table(smoke$education,smoke$smoking)
smoke$education2[smoke$education == 1] <- "1.대졸"
smoke$education2[smoke$education == 2] <- "2.고졸"
smoke$education2[smoke$education == 3] <- "3.중졸"
smoke$smoking2[smoke$smoking == 1] <- "1.과대흡연"
smoke$smoking2[smoke$smoking == 2] <- "2.보통흡연"
smoke$smoking2[smoke$smoking == 3] <- "3.비흡연"
table(smoke$education,smoke$smoking)
table(smoke$education2,smoke$smoking2)
library(gmodels)
library(gmodels)
CrossTable(smoke$education2,smoke$smoking2)
data <-read.csv("../data/cleanData.csv",fileEncoding = "euc-kr")
str(data)
x <- data.$position
data <-read.csv("../data/cleanData.csv",fileEncoding = "euc-kr")
str(data)
x <- data.$position
x <- data$position
y <- data$age3
plot(x,y,abline(lm(y~x)))
install.packages("learnr")
result <-read.csv("../data/response.csv")
str(result)
table(result$job2,result$response2)
chisq.test(result$job2,result$response2)
table(result$job2,result$response2)
result <-read.csv("../data/response.csv")
str(result)
result$job2[result$job==1] <- "1.학생"
result$job2[result$job==2] <- "2.직장인"
result$job2[result$job==3] <- "3.주부"
result$response2[result$response==1] <- "1.무응답"
result$response2[result$response==2] <- "2.낮음"
result$response2[result$response==3] <- "3.높음"
table(result$job2,result$response2)
chisq.test(result$job2,result$response2)
# 실습: 단순 선형 회귀분석 수행
# 단계 1: 데이터 가져오기
getwd()
product <- read.csv("../data/product.csv", header = TRUE)
str(product)
product <- read.csv("../data/product.csv", header = TRUE,fileEncoding = "euc - kr")
product <- read.csv("../data/product.csv", header = TRUE,fileEncoding = "euc-kr")
str(product)
# 단계 2: 독립변수와 종속변수 생성
y = product$제품_만족도
x = product$제품_적절성
df <- data.frame(x, y)
# 단계 3: 단순 선형회귀 모델 생성
result.lm <- lm(formula = y ~ x, data = df)
# 단계 3: 단순 선형회귀 "모델" 생성
result.lm <- lm(formula = y ~ x, data = df)
# 단계 4: 회귀분석의 절편과 기울기
result.lm
# 단계 4: 회귀분석의 절편과 기울기  절편과 계수와 x
result.lm
# 단계 5: 모델의 적합값과 잔차 보기
names(result.lm)
# 단계 5-1: 적합값 보기
fitted.values(result.lm)[1:2]
# 단계 5-2: 관측값 보기
head(df, 1)
# 단계 5-3: 회귀방정식을 적용하여 모델의 적합값 계산
Y = 0.7789 + 0.7393 * 4
Y
# 단계 5-4: 잔차(오차) 계산
3 - 3.735963
# 단계 3: 단순 선형회귀 "모델" 생성
#모델이란 수식을 만드는것
#기울기와 절편을 만드는것
#기울기와 계수를 결정하는것
result.lm <- lm(formula = y ~ x, data = df)
# 단계 4: 회귀분석의 절편과 기울기  절편과 계수와 x
result.lm
# eksrP 5-5: 모델의 잔차 보기
residuals(result.lm)[1:2]
# 단계 5-6: 모델의 잔차와 회귀방정식에 의한 적합값으로부터 관측값 계산
-0.7359630 + 3.735963
# 실습: 선형 회귀분석 모델 시각화
# 단계 1: x, y 산점도 그리기
plot(formula = y ~ x, data = product)
# 단계 2: 선형 회귀모델 생성
result.lm <- lm(formula = y ~ x, data = product)
# 단계 3: 회귀선
abline(result.lm, col = "red")
# 실습: 선형 회귀분석 결과보기
summary(result.lm)
library(reshape2)
install.packages("reshape2")
library(tidyverse)
library(reshape2)
house <- read.csv("../data/housing.csv")
head(house)
summarise(house)
summary(house)
#비지도가 필요할때 : 그룹을 못나눌때
## 데이터 시각화(데이터 확인을 위한)
colnames(house)
#비지도가 필요할때 : 그룹을 못나눌때
## 데이터 시각화(데이터 확인을 위한)
par(mfrow = c(2,5))
#비지도가 필요할때 : 그룹을 못나눌때
## 데이터 시각화(데이터 확인을 위한)
par(mfrow = c(2,5))
colnames(house)
ggplot(data = house)
#결측값 처리
house$mean_beadroom = house$total_bedrooms /house$households
house$mean_rooms = house$total_rooms / house$households
drop = c('total_bedrooms','total_rooms')
house = house[ , !(names(house) %in% drop)]
head(house)
## 코딩
categories = unique(house$ocean_proximity)
cat_house = data.frame(ocean_proximity = house$ocean_proximity)
for(cat in categories){
cat_house[,cat] = rep(0,times = nrow(cat_house))
}
cat_house
for(i in 1:length(cat_house$ocean_proximity)){
cat = as.character(cat_house$ocean_proximity[i])
cat_house[,cat][i] = 1
}
cat_house
head(cat_house)
